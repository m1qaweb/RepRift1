-- Migration: Create core application tables and RLS policies
-- Generated by Cascade on 2025-06-11T22:33 (+04)

-- Ensure gen_random_uuid is available
create extension if not exists "pgcrypto";

-- =====================
-- ==  PROFILES TABLE ==
-- =====================
-- This mirrors data from `auth.users` but stores profile-specific fields we need in the app.
create table if not exists public.profiles (
    id uuid primary key references auth.users (id) on delete cascade,
    name text,
    bio text,
    avatar_url text,
    height_cm integer,
    goals jsonb,
    initial_setup_completed boolean default false,
    created_at timestamp with time zone default now()
);

alter table public.profiles enable row level security;

-- Users may read their own profile
create policy "Users can view own profile" on public.profiles
  for select using ( id = auth.uid() );

-- Users may insert a profile row for themselves (we do this on sign-up)
create policy "Users can insert own profile" on public.profiles
  for insert with check ( id = auth.uid() );

-- Users may update only their own row
create policy "Users can update own profile" on public.profiles
  for update using ( id = auth.uid() ) with check ( id = auth.uid() );

-- ==================
-- == PROGRAMS TAB ==
-- ==================
create table if not exists public.programs (
    id uuid primary key default gen_random_uuid(),
    title text not null,
    description text,
    exercises jsonb not null,
    created_by uuid not null references auth.users (id) on delete cascade,
    created_at timestamp with time zone default now()
);

alter table public.programs enable row level security;

create policy "Programs: owner select" on public.programs
  for select using ( created_by = auth.uid() );
create policy "Programs: owner insert" on public.programs
  for insert with check ( created_by = auth.uid() );
create policy "Programs: owner update" on public.programs
  for update using ( created_by = auth.uid() ) with check ( created_by = auth.uid() );
create policy "Programs: owner delete" on public.programs
  for delete using ( created_by = auth.uid() );

-- =========================
-- == WORKOUT LOGS TABLE ==
-- =========================
create table if not exists public.workout_logs (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users (id) on delete cascade,
    date date not null,
    program_id uuid references public.programs (id) on delete set null,
    program_title text,
    duration_minutes smallint,
    calories_burned smallint,
    notes text,
    completed_exercises jsonb not null,
    created_at timestamp with time zone default now()
);

alter table public.workout_logs enable row level security;

create policy "Workout logs: owner select" on public.workout_logs
  for select using ( user_id = auth.uid() );
create policy "Workout logs: owner insert" on public.workout_logs
  for insert with check ( user_id = auth.uid() );
create policy "Workout logs: owner update" on public.workout_logs
  for update using ( user_id = auth.uid() ) with check ( user_id = auth.uid() );
create policy "Workout logs: owner delete" on public.workout_logs
  for delete using ( user_id = auth.uid() );

-- =========================
-- == BODY METRICS TABLE  ==
-- =========================
create table if not exists public.body_metrics (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users (id) on delete cascade,
    date date not null,
    weight_kg numeric(5,2) not null,
    bmi numeric(4,1),
    body_fat_percentage numeric(5,2),
    created_at timestamp with time zone default now()
);

alter table public.body_metrics enable row level security;

create policy "Body metrics: owner select" on public.body_metrics
  for select using ( user_id = auth.uid() );
create policy "Body metrics: owner insert" on public.body_metrics
  for insert with check ( user_id = auth.uid() );
create policy "Body metrics: owner update" on public.body_metrics
  for update using ( user_id = auth.uid() ) with check ( user_id = auth.uid() );
create policy "Body metrics: owner delete" on public.body_metrics
  for delete using ( user_id = auth.uid() );

-- ======================
-- Migration complete
-- ======================
